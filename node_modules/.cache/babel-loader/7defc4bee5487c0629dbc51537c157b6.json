{"ast":null,"code":"import { createStore } from 'vuex';\nimport axios from \"axios\";\nconst store = createStore({\n  state: {},\n  getters: {},\n  actions: {\n    login({\n      commit\n    }, user) {\n      return new Promise((resolve, reject) => {\n        commit('auth_request');\n        axios({\n          url: 'login',\n          data: user,\n          method: 'POST'\n        }).then(resp => {\n          const token = 'Bearer ' + resp.data.access_token;\n          const user = resp.data.user;\n          localStorage.setItem('token', token);\n          axios.defaults.headers.common['Authorization'] = token;\n          commit('auth_success', token, user);\n          commit('set_user', user);\n          commit('handle_error', '');\n          resolve(resp);\n        }).catch(err => {\n          localStorage.removeItem('token');\n          reject(err);\n        });\n      });\n    },\n\n    getUser({\n      commit\n    }) {\n      return new Promise((resolve, reject) => {\n        axios({\n          url: 'user',\n          method: 'GET'\n        }).then(res => {\n          commit('set_user', res.data);\n          resolve(res);\n          console.log(reject);\n        });\n      });\n    }\n\n  },\n  mutations: {\n    auth_request(state) {\n      state.status = 'loading';\n    },\n\n    auth_success(state, token) {\n      state.status = 'success';\n      state.token = token;\n    },\n\n    set_user(state, user) {\n      state.user = user;\n    },\n\n    handle_error(state, error) {\n      state.error = error;\n    }\n\n  }\n});\nexport default store;","map":{"version":3,"sources":["D:/Web/vue/ecommerce_admin_ui/src/store/index.js"],"names":["createStore","axios","store","state","getters","actions","login","commit","user","Promise","resolve","reject","url","data","method","then","resp","token","access_token","localStorage","setItem","defaults","headers","common","catch","err","removeItem","getUser","res","console","log","mutations","auth_request","status","auth_success","set_user","handle_error","error"],"mappings":"AAAA,SAASA,WAAT,QAA4B,MAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,KAAK,GAAGF,WAAW,CAAC;AAExBG,EAAAA,KAAK,EAAE,EAFiB;AAKxBC,EAAAA,OAAO,EAAE,EALe;AAQxBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,KAAK,CAAC;AAAEC,MAAAA;AAAF,KAAD,EAAaC,IAAb,EAAmB;AACtB,aAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCJ,QAAAA,MAAM,CAAC,cAAD,CAAN;AACAN,QAAAA,KAAK,CAAC;AAAEW,UAAAA,GAAG,EAAE,OAAP;AAAgBC,UAAAA,IAAI,EAAEL,IAAtB;AAA4BM,UAAAA,MAAM,EAAE;AAApC,SAAD,CAAL,CACGC,IADH,CACQC,IAAI,IAAI;AACZ,gBAAMC,KAAK,GAAG,YAAYD,IAAI,CAACH,IAAL,CAAUK,YAApC;AACA,gBAAMV,IAAI,GAAGQ,IAAI,CAACH,IAAL,CAAUL,IAAvB;AACAW,UAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BH,KAA9B;AACAhB,UAAAA,KAAK,CAACoB,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAiDN,KAAjD;AACAV,UAAAA,MAAM,CAAC,cAAD,EAAiBU,KAAjB,EAAwBT,IAAxB,CAAN;AACAD,UAAAA,MAAM,CAAC,UAAD,EAAaC,IAAb,CAAN;AACAD,UAAAA,MAAM,CAAC,cAAD,EAAiB,EAAjB,CAAN;AACAG,UAAAA,OAAO,CAACM,IAAD,CAAP;AACD,SAVH,EAWGQ,KAXH,CAWSC,GAAG,IAAI;AACZN,UAAAA,YAAY,CAACO,UAAb,CAAwB,OAAxB;AACAf,UAAAA,MAAM,CAACc,GAAD,CAAN;AACD,SAdH;AAeD,OAjBM,CAAP;AAkBD,KApBM;;AAqBPE,IAAAA,OAAO,CAAC;AAAEpB,MAAAA;AAAF,KAAD,EAAa;AAClB,aAAO,IAAIE,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCV,QAAAA,KAAK,CAAC;AAAEW,UAAAA,GAAG,EAAE,MAAP;AAAeE,UAAAA,MAAM,EAAE;AAAvB,SAAD,CAAL,CAAsCC,IAAtC,CAA2Ca,GAAG,IAAI;AAChDrB,UAAAA,MAAM,CAAC,UAAD,EAAaqB,GAAG,CAACf,IAAjB,CAAN;AACAH,UAAAA,OAAO,CAACkB,GAAD,CAAP;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYnB,MAAZ;AACD,SAJD;AAKD,OANM,CAAP;AAOD;;AA7BM,GARe;AAuCxBoB,EAAAA,SAAS,EAAE;AACTC,IAAAA,YAAY,CAAC7B,KAAD,EAAQ;AAClBA,MAAAA,KAAK,CAAC8B,MAAN,GAAe,SAAf;AACD,KAHQ;;AAITC,IAAAA,YAAY,CAAC/B,KAAD,EAAQc,KAAR,EAAe;AACzBd,MAAAA,KAAK,CAAC8B,MAAN,GAAe,SAAf;AACA9B,MAAAA,KAAK,CAACc,KAAN,GAAcA,KAAd;AACD,KAPQ;;AAQTkB,IAAAA,QAAQ,CAAChC,KAAD,EAAQK,IAAR,EAAc;AACpBL,MAAAA,KAAK,CAACK,IAAN,GAAaA,IAAb;AACD,KAVQ;;AAWT4B,IAAAA,YAAY,CAACjC,KAAD,EAAQkC,KAAR,EAAe;AACzBlC,MAAAA,KAAK,CAACkC,KAAN,GAAcA,KAAd;AACD;;AAbQ;AAvCa,CAAD,CAAzB;AAwDA,eAAenC,KAAf","sourcesContent":["import { createStore } from 'vuex'\r\nimport axios from \"axios\";\r\n\r\nconst store = createStore({\r\n\r\n  state: {\r\n    \r\n  },\r\n  getters: {\r\n    \r\n  },\r\n  actions: {\r\n    login({ commit }, user) {\r\n      return new Promise((resolve, reject) => {\r\n        commit('auth_request')\r\n        axios({ url: 'login', data: user, method: 'POST' })\r\n          .then(resp => {\r\n            const token = 'Bearer ' + resp.data.access_token\r\n            const user = resp.data.user\r\n            localStorage.setItem('token', token)\r\n            axios.defaults.headers.common['Authorization'] = token\r\n            commit('auth_success', token, user)\r\n            commit('set_user', user)\r\n            commit('handle_error', '')\r\n            resolve(resp)\r\n          })\r\n          .catch(err => {\r\n            localStorage.removeItem('token')\r\n            reject(err)\r\n          })\r\n      })\r\n    },\r\n    getUser({ commit }) {\r\n      return new Promise((resolve, reject) => {\r\n        axios({ url: 'user', method: 'GET' }).then(res => {\r\n          commit('set_user', res.data)\r\n          resolve(res)\r\n          console.log(reject)\r\n        })\r\n      });\r\n    }\r\n  },\r\n  mutations: {\r\n    auth_request(state) {\r\n      state.status = 'loading'\r\n    },\r\n    auth_success(state, token) {\r\n      state.status = 'success'\r\n      state.token = token\r\n    },\r\n    set_user(state, user) {\r\n      state.user = user\r\n    },\r\n    handle_error(state, error) {\r\n      state.error = error\r\n    },\r\n  }\r\n});\r\n\r\nexport default store;"]},"metadata":{},"sourceType":"module"}