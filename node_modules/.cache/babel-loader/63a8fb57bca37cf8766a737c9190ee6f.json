{"ast":null,"code":"import { createStore } from 'vuex';\nimport axios from \"axios\";\nconst store = createStore({\n  state: {\n    status: '',\n    token: localStorage.getItem('token') || '',\n    user: {},\n    error: ''\n  },\n  getters: {\n    isLoggedIn: state => !!state.token,\n    authStatus: state => state.status,\n    getUser: state => state.user,\n    getError: state => state.error\n  },\n  actions: {\n    login({\n      commit\n    }, user) {\n      return new Promise((resolve, reject) => {\n        commit('auth_request');\n        axios({\n          url: 'login',\n          data: user,\n          method: 'POST'\n        }).then(resp => {\n          console;\n          const token = 'Bearer ' + resp.data.access_token;\n          const user = resp.data.user;\n          localStorage.setItem('token', token);\n          axios.defaults.headers.common['Authorization'] = token;\n          commit('auth_success', token, user);\n          commit('set_user', user);\n          commit('handle_error', '');\n          resolve(resp);\n        }).catch(err => {\n          localStorage.removeItem('token');\n          reject(err);\n        });\n      });\n    },\n\n    getUser({\n      commit\n    }) {\n      return new Promise((resolve, reject) => {\n        axios({\n          url: 'user',\n          method: 'GET'\n        }).then(res => {\n          commit('set_user', res.data);\n          resolve(res);\n          console.log(reject);\n        });\n      });\n    }\n\n  },\n  mutations: {\n    auth_request(state) {\n      state.status = 'loading';\n    },\n\n    auth_success(state, token) {\n      state.status = 'success';\n      state.token = token;\n    },\n\n    set_user(state, user) {\n      state.user = user;\n    },\n\n    handle_error(state, error) {\n      state.error = error;\n    }\n\n  }\n});\nexport default store;","map":{"version":3,"sources":["D:/Web/vue/ecommerce_admin_ui/src/store/index.js"],"names":["createStore","axios","store","state","status","token","localStorage","getItem","user","error","getters","isLoggedIn","authStatus","getUser","getError","actions","login","commit","Promise","resolve","reject","url","data","method","then","resp","console","access_token","setItem","defaults","headers","common","catch","err","removeItem","res","log","mutations","auth_request","auth_success","set_user","handle_error"],"mappings":"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","sourcesContent":["import { createStore } from 'vuex'\r\nimport axios from \"axios\";\r\n\r\nconst store = createStore({\r\n\r\n  state: {\r\n    status: '',\r\n    token: localStorage.getItem('token') || '',\r\n    user: {},\r\n    error: '',\r\n  },\r\n  getters: {\r\n    isLoggedIn: state => !!state.token,\r\n    authStatus: state => state.status,\r\n    getUser: state => state.user,\r\n    getError: state => state.error\r\n  },\r\n  actions: {\r\n    login({ commit }, user) {\r\n      return new Promise((resolve, reject) => {\r\n        commit('auth_request')\r\n        axios({ url: 'login', data: user, method: 'POST' })\r\n          .then(resp => {\r\n            console\r\n            const token = 'Bearer ' + resp.data.access_token\r\n            const user = resp.data.user\r\n            localStorage.setItem('token', token)\r\n            axios.defaults.headers.common['Authorization'] = token\r\n            commit('auth_success', token, user)\r\n            commit('set_user', user)\r\n            commit('handle_error', '')\r\n            resolve(resp)\r\n          })\r\n          .catch(err => {\r\n            localStorage.removeItem('token')\r\n            reject(err)\r\n          })\r\n      })\r\n    },\r\n    getUser({ commit }) {\r\n      return new Promise((resolve, reject) => {\r\n        axios({ url: 'user', method: 'GET' }).then(res => {\r\n          commit('set_user', res.data)\r\n          resolve(res)\r\n          console.log(reject)\r\n        })\r\n      });\r\n    }\r\n  },\r\n  mutations: {\r\n    auth_request(state) {\r\n      state.status = 'loading'\r\n    },\r\n    auth_success(state, token) {\r\n      state.status = 'success'\r\n      state.token = token\r\n    },\r\n    set_user(state, user) {\r\n      state.user = user\r\n    },\r\n    handle_error(state, error) {\r\n      state.error = error\r\n    },\r\n  }\r\n});\r\n\r\nexport default store;"]},"metadata":{},"sourceType":"module"}